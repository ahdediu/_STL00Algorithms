### The Standard Template Library

From the programmer’s point of view, the STL provides a bunch of collection classes that meet
various needs, together with several algorithms that operate on them. All components of the STL are
templates, so they can be used for arbitrary element types. 

To use the appropriate kind of collection, you simply define the appropriate container and
call the corresponding member functions and algorithms to process the data.

#### STL Components

* **Containers** are used to manage collections of objects of a certain kind. Every kind of container has its own advantages and disadvantages, so having different container types reflects different requirements for collections in programs. The containers may be implemented as arrays or as linked lists, or they may have a special key for every element
* **Iterators** are used to step through the elements of collections of objects. These collections may be containers or subsets of containers.
* **Algorithms** are used to process the elements of collections. For example, algorithms can search, sort, modify, or simply use the elements for various purposes. Algorithms use iterators.

Iterators are the glue
between these two components (Figure 1).

.STL Components
image::Figures/img.png[STL Components]



#### Containers
Container classes, or containers for short, manage a collection of elements. To meet different needs,
the STL provides different kinds of containers, as shown in Figure 2.

.STL Container Types
image::Figures/img_1.png[STL COntainers Tyes]
STL Container Types

There are three kinds of containers:

1. *Sequence containers* are ordered collections in which every element has a certain position. The STL contains five predefined sequence container classes: array, vector, deque, list, and forward_list.
2. *Associative containers* are sorted collections in which the position of an element depends on its value (or key, if it’s a key/value pair) due to a certain sorting criterion. The STL contains four predefined associative container classes: set, multiset, map, and multimap.
3. *Unordered containers* are unordered collections in which the position of an element doesn’t matter. The STL contains four predefined unordered container classes: unordered_set, unordered_multiset, unordered_map, and unordered_multimap.

Implementation

* **Sequence** containers are usually implemented as arrays or linked lists.
* **Associative** containers are usually implemented as binary trees.
* **Unordered** containers are usually implemented as hash tables.

### Algorithms

The STL provides several standard algorithms for processing elements of collections. These algorithms
offer general fundamental services, such as searching, _sorting_, _copying_, _reordering_, _modifying_,
and _numeric processing_.

Algorithms are not member functions of the container classes but instead are global functions
that operate with iterators. This has an important advantage: Instead of each algorithm being implemented
for each container type, all are implemented only once for any container type. The algorithm
might even operate on elements of different container types. You can also use the algorithms for userdefined
container types. All in all, this concept reduces the amount of code and increases the power
and the flexibility of the library.

**Note** that this is **NOT** an **object-oriented programming paradigm**; it is a **generic functional programming
paradigm**. Instead of data and operations being unified, as in object-oriented programming,
they are separated into distinct parts that can interact via a certain interface. However, this
concept also has its price:

* First, the usage is not intuitive.
* Second, some combinations of data structures and algorithms might not work.
* Even worse, a combination of a container type and an algorithm might be possible but not useful (for example, it may lead to bad performance).

Let us see our first program in this context.

```C++
// stl/algo1.cpp
#include <algorithm>
#include <vector>
#include <iostream>

using namespace std;

int main() {
// create vector with elements from 1 to 6 in arbitrary order
    vector<int> coll = {2, 5, 4, 1, 6, 3};
// find and print minimum and maximum elements
    auto minpos = min_element(coll.cbegin(), coll.cend());
    cout << "min: " << *minpos << endl;
    auto maxpos = max_element(coll.cbegin(), coll.cend());
    cout << "max: " << *maxpos << endl;
// sort all elements
    cout << "sorted elements: ";
    sort(coll.begin(), coll.end());
    // print all elements
    for (auto elem: coll) {
        cout << elem << ' ';
    }
    cout << endl;
// find the first element with value 3
// - no cbegin()/cend() because later we modify the elements pos3 refers to
    auto pos3 = find(coll.begin(), coll.end(), // range
                     3); // value
// reverse the order of the found element with value 3 and all following elements
    cout << "reverse from the 3rd position: ";
    reverse(pos3, coll.end());
// print all elements
    for (auto elem: coll) {
        cout << elem << ' ';
    }
    cout << endl;
}
```

### Notes on the previous code

* Initializer list can be used to initialize the vector.
* Members cbegin() and cend() are provided, so instead of begin() and end(). In the old style we can still use const_iterators.
* note we can use auto instead of declaring the iterators explicitly.
* we can use range-based for loops, but also iterators to output each element.

**begin()** returns an _iterator to beginning_ while **cbegin()** returns a _const_iterator to beginning_.

The basic difference between these two iterators:

* *begin()* lets you change the value of the object it is pointing to.
* const_iterator will not let you change the value of the object.

